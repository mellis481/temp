name: Manual deployment workflow
on:
  workflow_dispatch:
    inputs:
      GIT_COMMIT_TO_PROMOTE:
        description: 'Git commit SHA to promote'
        required: true
      ENV_TO_PROMOTE_TO:
        description: 'Environment to promote to'
        required: true
jobs:
  manual-deploy:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Deploying commit ${{ github.event.inputs.GIT_COMMIT_TO_PROMOTE }} to the ${{ github.event.inputs.ENV_TO_PROMOTE_TO }} environment"
      - name: Configure Linux
        run: echo 16384 | sudo tee /proc/sys/fs/inotify/max_user_watches
      - name: Set up environment
        run: |
          echo "AWS_ACCESS_KEY_ID_DEVELOPMENT=${{ secrets.AWS_ACCESS_KEY_ID_DEVELOPMENT }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID_QA=${{ secrets.AWS_ACCESS_KEY_ID_QA }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID_STAGING=${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID_PRODUCTION=${{ secrets.AWS_ACCESS_KEY_ID_PRODUCTION }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY_DEVELOPMENT=${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY_QA=${{ secrets.AWS_SECRET_ACCESS_KEY_QA }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY_STAGING=${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY_PRODUCTION=${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}" >> $GITHUB_ENV
          echo "IMPORT_MAP_DEPLOYER_USERNAME_DEVELOPMENT=${{ secrets.IMPORT_MAP_DEPLOYER_USERNAME_DEVELOPMENT }}" >> $GITHUB_ENV
          echo "IMPORT_MAP_DEPLOYER_USERNAME_QA=${{ secrets.IMPORT_MAP_DEPLOYER_USERNAME_QA }}" >> $GITHUB_ENV
          echo "IMPORT_MAP_DEPLOYER_USERNAME_STAGING=${{ secrets.IMPORT_MAP_DEPLOYER_USERNAME_STAGING }}" >> $GITHUB_ENV
          echo "IMPORT_MAP_DEPLOYER_USERNAME_PRODUCTION=${{ secrets.IMPORT_MAP_DEPLOYER_USERNAME_PRODUCTION }}" >> $GITHUB_ENV
          echo "IMPORT_MAP_DEPLOYER_PASSWORD_DEVELOPMENT=${{ secrets.IMPORT_MAP_DEPLOYER_PASSWORD_DEVELOPMENT }}" >> $GITHUB_ENV
          echo "IMPORT_MAP_DEPLOYER_PASSWORD_QA=${{ secrets.IMPORT_MAP_DEPLOYER_PASSWORD_QA }}" >> $GITHUB_ENV
          echo "IMPORT_MAP_DEPLOYER_PASSWORD_STAGING=${{ secrets.IMPORT_MAP_DEPLOYER_PASSWORD_STAGING }}" >> $GITHUB_ENV
          echo "IMPORT_MAP_DEPLOYER_PASSWORD_PRODUCTION=${{ secrets.IMPORT_MAP_DEPLOYER_PASSWORD_PRODUCTION }}" >> $GITHUB_ENV
          echo "S3_REGION_KEY=us-east-1" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@vertexinc'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GIT_PACKAGE_TOKEN }}
      - id: install-dependencies
        name: Install dependencies
        uses: bahmutov/npm-install@v1
      - name: Install dependencies (failure)
        if: failure() && steps.install-dependencies.outcome == 'failure'
        run: echo 'If a @vertexinc-scoped package failed to install, please ensure that the SystemTeamAutomation GitHub user has access to the repository that failed to install.  The GIT_PACKAGE_TOKEN secret (which is necessary to authorize the `npm install` command) is owned by that account and is only available to repos that that account has access to.'
      - name: Lint
        run: npm run lint
      - name: Unit tests
        run: npm run test
      - id: cypress-mocked-api-tests
        name: Cypress mocked-api tests
        uses: cypress-io/github-action@v2
        with:
          wait-on: 'https://localhost:9001/${{ github.event.repository.name }}.js'
          start: npm run start:${{ github.event.inputs.ENV_TO_PROMOTE_TO }}
          command: npm run cypress:run:${{ github.event.inputs.ENV_TO_PROMOTE_TO }}
          install: false
        env:
          NODE_TLS_REJECT_UNAUTHORIZED: 0
      - name: Cypress mocked-api tests (failure)
        if: failure() && steps.cypress-mocked-api-tests.outcome == 'failure'
        uses: actions/upload-artifact@v2
        with:
          name: cypress-mocked-api-artifacts
          path: |
            cypress/videos
            cypress/screenshots
          retention-days: 1
      - name: Stop running app
        if: ${{ github.event.inputs.ENV_TO_PROMOTE_TO != 'production' }}
        run: |
          echo 'Killing all processes, including webpack-devserver, so the app can be restarted on the same port'
          killall node
      - id: cypress-e2e-tests
        if: ${{ github.event.inputs.ENV_TO_PROMOTE_TO != 'production' }}
        name: Cypress end-to-end tests
        uses: cypress-io/github-action@v2
        with:
          wait-on: 'https://localhost:9001/${{ github.event.repository.name }}.js'
          start: npm run start:${{ github.event.inputs.ENV_TO_PROMOTE_TO }}
          command: npm run cypress:run:e2e:${{ github.event.inputs.ENV_TO_PROMOTE_TO }}
          install: false
        env:
          NODE_TLS_REJECT_UNAUTHORIZED: 0
      - name: Cypress end-to-end tests (failure)
        if: failure() && steps.cypress-e2e-tests.outcome == 'failure'
        uses: actions/upload-artifact@v2
        with:
          name: cypress-e2e-artifacts
          path: |
            cypress/videos
            cypress/screenshots
          retention-days: 1
      - name: Build
        run: npm run build:${{ github.event.inputs.ENV_TO_PROMOTE_TO }}
      - name: Deploy
        run: npx @vertexinc/vtx-ui-tools-deployment deployMicroFrontend --gitCommitSha=${{ github.event.inputs.GIT_COMMIT_TO_PROMOTE }}
        env:
          NODE_ENV: ${{ github.event.inputs.ENV_TO_PROMOTE_TO }}
